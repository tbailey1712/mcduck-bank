rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             (request.auth.token.email == 'tony.bailey@gmail.com' ||
              get(/databases/$(database)/documents/accounts/$(request.auth.token.email)).data.administrator == true);
    }
    
    function isOwner(resource) {
      return isAuthenticated() && 
             resource.data.user_id == request.auth.uid;
    }
    
    function isAccountOwner(resource) {
      return isAuthenticated() && 
             (resource.data.email == request.auth.token.email ||
              resource.data.user_id == request.auth.uid);
    }
    
    function isAccountOwnerByEmail(documentId) {
      return isAuthenticated() && 
             documentId == request.auth.token.email;
    }
    
    // Account collection rules
    match /accounts/{accountId} {
      // Users can read/update their own account, admins can read all accounts
      allow read: if isAccountOwner(resource) || isAccountOwnerByEmail(accountId) || isAdmin();
      allow update: if (isAccountOwner(resource) || isAccountOwnerByEmail(accountId) || isAdmin()) && 
                       request.resource.data.keys().hasAny(['displayName', 'mobile', 'preferences', 'updatedAt', 'balance', 'lastUpdated', 'lastLogin', 'lastIp', 'lastSessionToken']);
      // Only admins can create accounts
      allow create: if isAdmin();
      // Prevent account deletion
      allow delete: if false;
    }
    
    // Transaction collection rules
    match /transactions/{transactionId} {
      // Users can read their own transactions, admins can read all
      allow read: if isOwner(resource) || isAdmin();
      
      // Users can create transactions for themselves, admins can create for any user
      allow create: if isAuthenticated() && 
                       (request.resource.data.user_id == request.auth.uid || isAdmin());
      
      // Only admins can update transactions (for approval/rejection)
      allow update: if isAdmin();
      
      // Only admins can delete transactions
      allow delete: if isAdmin();
    }
    
    // Admin logs collection (admin-only access)
    match /admin_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // User settings collection
    match /user_settings/{userId} {
      allow read, write: if isAuthenticated() && 
                            userId == request.auth.uid;
    }
    
    // Audit logs (read-only for admins, write for system)
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // Allow any authenticated user to create audit logs
      allow update, delete: if false;
    }
    
    // Withdrawal tasks collection
    match /withdrawal_tasks/{taskId} {
      // Users can read their own withdrawal requests, admins can read all
      allow read: if isOwner(resource) || isAdmin();
      
      // Users can create withdrawal requests for themselves, admins can create for any user
      allow create: if isAuthenticated() && 
                       (request.resource.data.user_id == request.auth.uid || isAdmin());
      
      // Users can update their own pending requests (cancel), admins can update any
      allow update: if (isOwner(resource) && resource.data.status == 'pending') || isAdmin();
      
      // Only admins can delete withdrawal requests
      allow delete: if isAdmin();
    }
    
    // Security events collection  
    match /security_events/{eventId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // System configuration (admin-only access)
    match /system/{configId} {
      allow read, write: if isAdmin();
    }
    
    // Withdrawal requests
    match /withdrawal_requests/{requestId} {
      allow read: if isAuthenticated() && 
                     (resource.data.user_id == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.user_id == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     (resource.data.user_id == request.auth.uid || isAdmin());
      allow update: if isAuthenticated() && 
                       resource.data.user_id == request.auth.uid;
      allow create, delete: if isAdmin();
    }
    
    // Job logs - admin read-only
    match /job_logs/{logId} {
      allow read: if isAdmin();
      allow create, update, delete: if false;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}